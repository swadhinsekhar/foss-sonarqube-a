#!/bin/sh
#
# Copyright (C) Internet Systems Consortium, Inc. ("ISC")
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, you can obtain one at https://mozilla.org/MPL/2.0/.
#
# See the COPYRIGHT file distributed with this work for additional
# information regarding copyright ownership.

#
# Common configuration data for system tests, to be sourced into
# other shell scripts.
#

# For specific stuff (currently kill HUP -> rdnc reload in notify)
CYGWIN=1

# Find the top of the BIND9 tree.
TOP=${SYSTEMTESTTOP:=.}/../../..

# Make it absolute so that it continues to work after we cd.
TOP=`cd $TOP && pwd`

# Visual Studio build configurations are Release and Debug
VSCONF=${VSCONF:-Debug}

# Default algorithm for testing
DEFAULT_ALGORITHM=RSASHA256
DEFAULT_ALGORITHM_NUMBER=8
DEFAULT_BITS=1280

# must be different from DEFAULT_ALGORITHM
ALTERNATIVE_ALGORITHM=RSASHA1
ALTERNATIVE_ALGORITHM_NUMBER=5
ALTERNATIVE_BITS=1280

# This is an algorithm that is used for tests against the
# "disable-algorithms" configuration option.  Must be different from above
# algorithms.
DISABLED_ALGORITHM=ECDSAP384SHA384
DISABLED_ALGORITHM_NUMBER=14
DISABLED_BITS=384

ARPANAME=$TOP/Build/$VSCONF/arpaname@EXEEXT@
CHECKCONF=$TOP/Build/$VSCONF/named-checkconf@EXEEXT@
CHECKDS="$PYTHON `cygpath -w $TOP/bin/python/dnssec-checkds.py`"
CHECKZONE=$TOP/Build/$VSCONF/named-checkzone@EXEEXT@
COVERAGE="$PYTHON `cygpath -w $TOP/bin/python/dnssec-coverage.py`"
DDNSCONFGEN=$TOP/Build/$VSCONF/ddns-confgen@EXEEXT@
DELV=$TOP/Build/$VSCONF/delv@EXEEXT@
DIG=$TOP/Build/$VSCONF/dig@EXEEXT@
DNSTAPREAD=$TOP/Build/$VSCONF/dnstap-read@EXEEXT@
DSFROMKEY=$TOP/Build/$VSCONF/dnssec-dsfromkey@EXEEXT@
FEATURETEST=$TOP/Build/$VSCONF/feature-test@EXEEXT@
FSTRM_CAPTURE=@FSTRM_CAPTURE@
GENRANDOM=$TOP/Build/$VSCONF/genrandom@EXEEXT@
IMPORTKEY=$TOP/Build/$VSCONF/dnssec-importkey@EXEEXT@
JOURNALPRINT=$TOP/Build/$VSCONF/named-journalprint@EXEEXT@
KEYFRLAB=$TOP/Build/$VSCONF/dnssec-keyfromlabel@EXEEXT@
KEYGEN=$TOP/Build/$VSCONF/dnssec-keygen@EXEEXT@
KEYMGR="$PYTHON `cygpath -w $TOP/bin/python/dnssec-keymgr.py`"
# We must use "named -l" instead of "lwresd" because argv[0] is lost
# if the program is libtoolized.
LWRESD="$TOP/Build/$VSCONF/named@EXEEXT@ -l"
MDIG=$TOP/Build/$VSCONF/mdig@EXEEXT@
NAMED=$TOP/Build/$VSCONF/named@EXEEXT@
NSLOOKUP=$TOP/Build/$VSCONF/nslookup@EXEEXT@
NSUPDATE=$TOP/Build/$VSCONF/nsupdate@EXEEXT@
NZD2NZF=$TOP/Build/$VSCONF/named-nzd2nzf@EXEEXT@
PK11DEL="$TOP/Build/$VSCONF/pkcs11-destroy@EXEEXT@ -s ${SLOT:-0} -p ${HSMPIN:-1234} -w 0"
PK11GEN="$TOP/Build/$VSCONF/pkcs11-keygen@EXEEXT@ -q -s ${SLOT:-0} -p ${HSMPIN:-1234}"
PK11LIST="$TOP/Build/$VSCONF/pkcs11-list@EXEEXT@ -s ${SLOT:-0} -p ${HSMPIN:-1234}"
RESOLVE=$TOP/lib/samples/resolve
REVOKE=$TOP/Build/$VSCONF/dnssec-revoke@EXEEXT@
RNDC=$TOP/Build/$VSCONF/rndc@EXEEXT@
RNDCCONFGEN=$TOP/Build/$VSCONF/rndc-confgen@EXEEXT@
RRCHECKER=$TOP/Build/$VSCONF/named-rrchecker@EXEEXT@
SAMPLEUPDATE=$TOP/Build/$VSCONF/update@EXEEXT@
SETTIME=$TOP/Build/$VSCONF/dnssec-settime@EXEEXT@
SIGNER=$TOP/Build/$VSCONF/dnssec-signzone@EXEEXT@
TSIGKEYGEN=$TOP/Build/$VSCONF/tsig-keygen@EXEEXT@
VERIFY=$TOP/Build/$VSCONF/dnssec-verify@EXEEXT@

# to port WIRETEST=$TOP/Build/$VSCONF/wire_test@EXEEXT@

# this is given as argument to native WIN32 executables
RANDFILE=`cygpath -w $TOP/bin/tests/system/random.data`

BIGKEY=$TOP/Build/$VSCONF/bigkey@EXEEXT@
GENCHECK=$TOP/Build/$VSCONF/gencheck@EXEEXT@
KEYCREATE=$TOP/Build/$VSCONF/keycreate@EXEEXT@
KEYDELETE=$TOP/Build/$VSCONF/keydelete@EXEEXT@
LWTEST=$TOP/Build/$VSCONF/lwtest@EXEEXT@
MAKEJOURNAL=$TOP/Build/$VSCONF/makejournal@EXEEXT@
PIPEQUERIES=$TOP/Build/$VSCONF/pipequeries@EXEEXT@
# to port SAMPLEUPDATE=$TOP/lib/samples/sample-update

# we don't want a KRB5_CONFIG setting breaking the tests
KRB5_CONFIG=NUL

# the amount of fake "entropy" to generate with GENRANDOM in
# system tests
RANDOMSIZE=4096

# The "stress" test is not run by default since it creates enough
# load on the machine to make it unusable to other users.
# The "dialup", "delzone", and "dupsigs" tests are also not run by
# default because they take a very long time to complete.
#
# List of tests that use ports 5300 and 9953.  For this reason, these must
# be run sequentially.
SEQUENTIALDIRS="ecdsa eddsa gost lwresd @PKCS11_TEST@ tkey"

# List of tests that use unique ports (other than 5300 and 9953). These
# tests can be run in parallel.
#
# Note: some of the longer-running tests are scheduled first, in
# order to get more benefit from parallelism.
#
# XXX: removed logfileconfig as it doesn't currently work on windows.
PARALLELDIRS="dnssec rpzrecurse \
	acl additional addzone allow-query autosign \
	builtin cacheclean case catz chain \
	checkconf checknames checkzone \
	@CHECKDS@ @COVERAGE@ @KEYMGR@ \
	cookie database digdelv dlv dlz dlzexternal \
	dns64 @DNSTAP@ dscp dsdigest dyndb \
	ednscompliance emptyzones \
	fetchlimit filter-aaaa formerr forward \
	geoip geoip2 glue idna inline integrity ixfr \
	legacy limits masterfile masterformat metadata mkeys \
	names notify nslookup nsupdate nzd2nzf \
	pending pipelined \
	reclimit redirect resolver rndc rootkeysentinel rpz \
	rrchecker rrl rrsetorder rsabigexponent runtime \
	sfcache smartsign sortlist \
	spf staticstub statistics statschannel stub \
	tcp tsig tsiggss \
	unknown upforwd verify views wildcard \
	xfer xferquota zero zonechecks"

SUBDIRS="$SEQUENTIALDIRS $PARALLELDIRS"

#Things that are different on Windows
KILL="/bin/kill -f"
DIFF="diff --strip-trailing-cr"
DOS2UNIX=dos2unix
# No trailing period
TP=

# Configure is launched from native environment, but tests are run in Cygwin -
# so any detection is unreliable.
SHELL="/bin/bash -o igncr"
CURL=/usr/bin/curl
XMLLINT=/usr/bin/xmllint
PERL=/usr/bin/perl

testsock6() {
	if test -n "$PERL" \
		&& $PERL -e "use IO::Socket::INET6;" 2> /dev/null \
		&& grep "^#define WANT_IPV6 1" "$TOP/config.h" > /dev/null 2>&1
	then
		$PERL "$TOP/bin/tests/system/testsock6.pl" "$@"
	else
		false
	fi
}

#
# PsSuspend is part of PSTools and can be downloaded from
# https://download.sysinternals.com/files/PSTools.zip
#
PSSUSPEND=@PSSUSPEND@
PYTHON=@PYTHON@

#
# Determine if we support various optional features.
#
CHECK_DSA=@CHECK_DSA@
HAVEXMLSTATS=@XMLSTATS@
HAVEJSONSTATS=@JSONSTATS@
ZLIB=@ZLIB@
NZD=@NZD_TOOLS@

. ${TOP}/version

#
# Set up color-coded test output
#
if test -t 1 && type tput > /dev/null; then
    COLOR_END=`tput setaf 4`    # blue
    COLOR_FAIL=`tput setaf 1`   # red
    COLOR_INFO=`tput bold`      # bold
    COLOR_NONE=`tput sgr0`
    COLOR_PASS=`tput setaf 2`   # green
    COLOR_START=`tput setaf 4`  # blue
    COLOR_WARN=`tput setaf 3`   # yellow
else
    # set to empty strings so printf succeeds
    COLOR_END=''
    COLOR_FAIL=''
    COLOR_INFO=''
    COLOR_NONE=''
    COLOR_PASS=''
    COLOR_START=''
    COLOR_WARN=''
fi

echofail () {
	printf "${COLOR_FAIL}%s${COLOR_NONE}\n" "$*"
}
echowarn () {
	printf "${COLOR_WARN}%s${COLOR_NONE}\n" "$*"
}
echopass () {
	printf "${COLOR_PASS}%s${COLOR_NONE}\n" "$*"
}
echoinfo () {
	printf "${COLOR_INFO}%s${COLOR_NONE}\n" "$*"
}
echostart () {
	printf "${COLOR_START}%s${COLOR_NONE}\n" "$*"
}
echoend () {
	printf "${COLOR_END}%s${COLOR_NONE}\n" "$*"
}

SYSTESTDIR="`basename $PWD`"

echo_i() {
    printf '%s\n' "$*" | while read -r __LINE ; do
       echoinfo "I:$SYSTESTDIR:$__LINE"
    done
}

echo_ic() {
    printf '%s\n' "$*" | while read -r __LINE ; do
       echoinfo "I:$SYSTESTDIR:  $__LINE"
    done
}

echo_d() {
    echo "$@" | while read -r __LINE ; do
       echoinfo "D:$SYSTESTDIR:$__LINE"
    done
}

cat_i() {
    while read -r __LINE ; do
       echoinfo "I:$SYSTESTDIR:$__LINE"
    done
}

cat_d() {
    while read -r __LINE ; do
       echoinfo "D:$SYSTESTDIR:$__LINE"
    done
}

digcomp() {
    output=`$PERL $SYSTEMTESTTOP/digcomp.pl "$@"`
    result=$?
    [ -n "$output" ] &&  { echo "digcomp failed:"; echo "$output"; } | cat_i
    return $result
}

#
# Useful functions in test scripts
#

# assert_int_equal: compare two integer variables, $1 and $2
#
# If $1 and $2 are equal, return 0; if $1 and $2 are not equal, report
# the error using the description of the tested variable provided in $3
# and return 1.
assert_int_equal() {
	found="$1"
	expected="$2"
	description="$3"

	if [ "${expected}" -ne "${found}" ]; then
		echo_i "incorrect ${description}: got ${found}, expected ${expected}"
		return 1
	fi

	return 0
}

# keyfile_to_keys_section: helper function for keyfile_to_*_keys() which
# converts keyfile data into a configuration section using the supplied
# parameters
keyfile_to_keys_section() {
    section_name=$1
    key_prefix=$2
    shift
    shift
    echo "$section_name {"
    for keyname in $*; do
	awk '!/^; /{
	    printf "\t\""$1"\" "
	    printf "'"$key_prefix"'"
	    printf $4 " " $5 " " $6 " \""
	    for (i=7; i<=NF; i++) printf $i
	    printf "\";\n"
	}' $keyname.key
    done
    echo "};"
}

# keyfile_to_trusted_keys: convert key data contained in the keyfile(s)
# provided to a "trusted-keys" section suitable for including in a
# resolver's configuration file
keyfile_to_trusted_keys() {
    keyfile_to_keys_section "trusted-keys" "" $*
}

# keyfile_to_managed_keys: convert key data contained in the keyfile(s)
# provided to a "managed-keys" section suitable for including in a
# resolver's configuration file
keyfile_to_managed_keys() {
    keyfile_to_keys_section "managed-keys" "initial-key " $*
}

# keyfile_to_key_id: convert a key file name to a key ID
#
# For a given key file name (e.g. "Kexample.+013+06160") provided as $1,
# print the key ID with leading zeros stripped ("6160" for the
# aforementioned example).
keyfile_to_key_id() {
	echo "$1" | sed "s/.*+0\{0,4\}//"
}

# nextpart*() - functions for reading files incrementally
#
# These functions aim to facilitate looking for (or waiting for)
# messages which may be logged more than once throughout the lifetime of
# a given named instance by outputting just the part of the file which
# has been appended since the last time we read it.
#
# Calling some of these functions causes temporary *.prev files to be
# created that need to be cleaned up manually (usually by a given system
# test's clean.sh script).
#
# Note that unlike other nextpart*() functions, nextpartread() is not
# meant to be directly used in system tests; its sole purpose is to
# reduce code duplication below.
#
# A quick usage example:
#
#     $ echo line1 > named.log
#     $ echo line2 >> named.log
#     $ nextpart named.log
#     line1
#     line2
#     $ echo line3 >> named.log
#     $ nextpart named.log
#     line3
#     $ nextpart named.log
#     $ echo line4 >> named.log
#     $ nextpartpeek named.log
#     line4
#     $ nextpartpeek named.log
#     line4
#     $ nextpartreset named.log
#     $ nextpartpeek named.log
#     line1
#     line2
#     line3
#     line4
#     $ nextpart named.log
#     line1
#     line2
#     line3
#     line4
#     $ nextpart named.log
#     $

# nextpartreset: reset the marker used by nextpart() and nextpartpeek()
# so that it points to the start of the given file
nextpartreset() {
    echo "0" > $1.prev
}

# nextpartread: read everything that's been appended to a file since the
# last time 'nextpart' was called and print it to stdout, print the
# total number of lines read from that file so far to stderr
nextpartread() {
    [ -f $1.prev ] || nextpartreset $1
    prev=`cat $1.prev`
    awk "NR > $prev "'{ print }
         END          { print NR > "/dev/stderr" }' $1
}

# nextpart: read everything that's been appended to a file since the
# last time 'nextpart' was called
nextpart() {
	nextpartread $1 2> $1.prev.tmp
	mv $1.prev.tmp $1.prev
}

# nextpartpeek: read everything that's been appended to a file since the
# last time 'nextpart' was called
nextpartpeek() {
	nextpartread $1 2> /dev/null
}

# _search_log: look for message $1 in file $2 with nextpart().
_search_log() (
	msg="$1"
	file="$2"
	nextpart "$file" | grep -F "$msg" > /dev/null
)

# _search_log_peek: look for message $1 in file $2 with nextpartpeek().
_search_log_peek() (
	msg="$1"
	file="$2"
	nextpartpeek "$file" | grep -F "$msg" > /dev/null
)

# wait_for_log: wait until message $2 in file $3 appears.  Bail out after
# $1 seconds.  This needs to be used in conjunction with a prior call to
# nextpart() or nextpartreset() on the same file to guarantee the offset is
# set correctly.  Tests using wait_for_log() are responsible for cleaning up
# the created <file>.prev files.
wait_for_log() (
	timeout="$1"
	msg="$2"
	file="$3"
	retry_quiet "$timeout" _search_log "$msg" "$file" && return 0
	echo_i "exceeded time limit waiting for '$msg' in $file"
        return 1
)

# wait_for_log_peek: similar to wait_for_log() but peeking, so the file offset
# does not change.
wait_for_log_peek() (
	timeout="$1"
	msg="$2"
	file="$3"
	retry_quiet "$timeout" _search_log_peek "$msg" "$file" && return 0
	echo_i "exceeded time limit waiting for '$msg' in $file"
        return 1
)

# _retry: keep running a command until it succeeds, up to $1 times, with
# one-second intervals, optionally printing a message upon every attempt
_retry() {
	__retries="${1}"
	shift

	while :; do
		if "$@"; then
			return 0
		fi
		__retries=$((__retries-1))
		if [ "${__retries}" -gt 0 ]; then
			if [ "${__retry_quiet}" -ne 1 ]; then
				echo_i "retrying"
			fi
			sleep 1
		else
			return 1
		fi
	done
}

# retry: call _retry() in verbose mode
retry() {
	__retry_quiet=0
	_retry "$@"
}

# retry_quiet: call _retry() in silent mode
retry_quiet() {
	__retry_quiet=1
	_retry "$@"
}

# _repeat: keep running command up to $1 times, unless it fails
_repeat() (
    __retries="${1}"
    shift
    while :; do
        if ! "$@"; then
            return 1
        fi
        __retries=$((__retries-1))
        if [ "${__retries}" -le 0 ]; then
            break
        fi
    done
    return 0
)

# rndc_dumpdb: call "rndc dumpdb [...]" and wait until it completes
#
# The first argument is the name server instance to send the command to, in the
# form of "nsX" (where "X" is the instance number), e.g. "ns5".  The remaining
# arguments, if any, are appended to the rndc command line after "dumpdb".
#
# Control channel configuration for the name server instance to send the
# command to must match the contents of bin/tests/system/common/rndc.conf.
#
# rndc output is stored in a file called rndc.out.test${n}; the "n" variable is
# required to be set by the calling tests.sh script.
#
# Return 0 if the dump completes successfully; return 1 if rndc returns an exit
# code other than 0 or if the "; Dump complete" string does not appear in the
# dump within 10 seconds.
rndc_dumpdb() {
	__ret=0
	__dump_complete=0
	__server="${1}"
	__ip="10.53.0.`echo "${__server}" | tr -c -d "0-9"`"

	shift
	${RNDC} -c ../common/rndc.conf -p "${CONTROLPORT}" -s "${__ip}" dumpdb "$@" > "rndc.out.test${n}" 2>&1 || __ret=1

	for _ in 0 1 2 3 4 5 6 7 8 9
	do
		if grep '^; Dump complete$' "${__server}/named_dump.db" > /dev/null; then
			mv "${__server}/named_dump.db" "${__server}/named_dump.db.test${n}"
			__dump_complete=1
			break
		fi
		sleep 1
	done

	if [ ${__dump_complete} -eq 0 ]; then
		echo_i "timed out waiting for 'rndc dumpdb' to finish"
		__ret=1
	fi

	return ${__ret}
}

# copy_setports - Copy Configuration File and Replace Ports
#
# Convenience function to copy a configuration file, replacing the tokens
# QUERYPORT, CONTROLPORT and EXTRAPORT[1-8] with the values of the equivalent
# environment variables. (These values are set by "run.sh", which calls the
# scripts invoking this function.)
#
# Usage:
#   copy_setports infile outfile

copy_setports() {
    # The indirect method of handling the substitution of the PORT variables
    # (defining "atsign" then substituting for it in the "sed" statement) is
    # required because to prevent the "Configure" script (in the the
    # bin9/win32utils directory) replacing the the <at>PORT<at> substitution
    # tokens when it processes this file and produces conf.sh.
    atsign="@"
    sed -e "s/${atsign}PORT${atsign}/${PORT}/g" \
	-e "s/${atsign}EXTRAPORT1${atsign}/${EXTRAPORT1}/g" \
	-e "s/${atsign}EXTRAPORT2${atsign}/${EXTRAPORT2}/g" \
	-e "s/${atsign}EXTRAPORT3${atsign}/${EXTRAPORT3}/g" \
	-e "s/${atsign}EXTRAPORT4${atsign}/${EXTRAPORT4}/g" \
	-e "s/${atsign}EXTRAPORT5${atsign}/${EXTRAPORT5}/g" \
	-e "s/${atsign}EXTRAPORT6${atsign}/${EXTRAPORT6}/g" \
	-e "s/${atsign}EXTRAPORT7${atsign}/${EXTRAPORT7}/g" \
	-e "s/${atsign}EXTRAPORT8${atsign}/${EXTRAPORT8}/g" \
	-e "s/${atsign}CONTROLPORT${atsign}/${CONTROLPORT}/g" \
	-e "s/${atsign}DEFAULT_ALGORITHM${atsign}/${DEFAULT_ALGORITHM}/g" \
	-e "s/${atsign}DEFAULT_ALGORITHM_NUMBER${atsign}/${DEFAULT_ALGORITHM_NUMBER}/g" \
	-e "s/${atsign}DEFAULT_BITS${atsign}/${DEFAULT_BITS}/g" \
	-e "s/${atsign}ALTERNATIVE_ALGORITHM${atsign}/${ALTERNATIVE_ALGORITHM}/g" \
	-e "s/${atsign}ALTERNATIVE_ALGORITHM_NUMBER${atsign}/${ALTERNATIVE_ALGORITHM_NUMBER}/g" \
	-e "s/${atsign}ALTERNATIVE_BITS${atsign}/${ALTERNATIVE_BITS}/g" \
	-e "s/${atsign}DISABLED_ALGORITHM${atsign}/${DISABLED_ALGORITHM}/g" \
	-e "s/${atsign}DISABLED_ALGORITHM_NUMBER${atsign}/${DISABLED_ALGORITHM_NUMBER}/g" \
	-e "s/${atsign}DISABLED_BITS${atsign}/${DISABLED_BITS}/g" \
	$1 > $2
}

#
# Export command paths
#
export ARPANAME
export BIGKEY
export CHECKZONE
export CYGWIN
export DESCRIPTION
export DIG
export FEATURETEST
export FSTRM_CAPTURE
export GENCHECK
export JOURNALPRINT
export KEYCREATE
export KEYDELETE
export KEYFRLAB
export KEYGEN
export KEYSETTOOL
export KEYSIGNER
export KRB5_CONFIG
export LWRESD
export LWTEST
export MAKEJOURNAL
export MDIG
export NAMED
export NSLOOKUP
export NSUPDATE
export NZD2NZF
export PERL
export PIPEQUERIES
export PK11DEL
export PK11GEN
export PK11LIST
export PSSUSPEND
export PYTHON
export RANDFILE
export RESOLVE
export RNDC
export RRCHECKER
export SAMPLEUPDATE
export SIGNER
export SUBDIRS
